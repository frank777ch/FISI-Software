package Semana4;
public class Lista {
    protected Nodo inicio, fin; //punteros para saber donde están el inicio y el fin
    public Lista() {
        inicio = null;
        fin = null;
    }
//Método para eliminar un Nodo del final
    public int borrarDelFinal() {
        int elemento = fin.dato;
        if (inicio == fin) {
            inicio = fin = null;
        } else {
            Nodo temporal = inicio;
            while (temporal.siguiente != fin) {
                temporal = temporal.siguiente;
            }
            fin = temporal;
            fin.siguiente = null;
        }
        return elemento;
    }
//Método para eliminar un Nodo del Inicio
    public int borrarDelInicio() {
        int elemento = inicio.dato;
        if (inicio == fin) {
            inicio = null;
            fin = null;
        } else {
            inicio = inicio.siguiente;
        }
        return elemento;
    }
//Metodo para saber si la lista está vacía
    public boolean estaVacia() {
        if (inicio == null) {
            return true;
        } else {
            return false;
        }
    }
    //Método para insertar al final de la lista
    public void agregarAlFinal(int elemento) {
        if (!estaVacia()) {
            fin.siguiente = new Nodo(elemento);
            fin = fin.siguiente;
        } else {
            inicio = fin = new Nodo(elemento);
        }
    }
    //metodo para agregar un nodo al inicio de la Lista
    public void agregarAlInicio(int elemento) {
        //Crear el nodo
        inicio = new Nodo(elemento, inicio);
        if (fin == null) {
            fin = inicio;
        }
    }
    //Método para mostrar los datos
    public void mostrarLista() {
        Nodo recorrer = inicio;
        System.out.println();
        while (recorrer != null) {
            System.out.print("[" + recorrer.dato + "]--->");
            recorrer = recorrer.siguiente;
        }
    }
    //Metodo para eliminar un nodo en especifico
    public void eliminar(int elemento){
        if(!estaVacia()){
            if(inicio==fin && elemento==inicio.dato){
                inicio=fin=null;
            }else if(elemento==inicio.dato){
                inicio=inicio.siguiente;
            }else{
                Nodo anterior,temporal;
                anterior=inicio;
                temporal=inicio.siguiente;
                while(temporal!=null && temporal.dato!=elemento){
                    anterior=anterior.siguiente;
                    temporal=temporal.siguiente;
                }
                if(temporal!=null){
                    anterior.siguiente=temporal.siguiente;
                    if(temporal==fin){
                        fin=anterior;
                    }
                }
            }
        }
    }
    //Metodo para buscar un elemento
    public boolean estaEnLaLista(int elemento){
        Nodo temporal = inicio;
        while(temporal!=null && temporal.dato!=elemento){
            temporal=temporal.siguiente;
        }
        return temporal!=null;
    }
}





